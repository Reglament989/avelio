// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void init(
    ffi.Pointer<ffi.Int8> base_url_ptr,
    ffi.Pointer<ffi.Int8> token_ptr,
  ) {
    return _init(
      base_url_ptr,
      token_ptr,
    );
  }

  late final _initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('init');
  late final _init = _initPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> tr(
    ffi.Pointer<ffi.Int8> key_translation,
    int size_args,
    ffi.Pointer<ffi.Int8> array_pointer,
  ) {
    return _tr(
      key_translation,
      size_args,
      array_pointer,
    );
  }

  late final _trPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32, ffi.Pointer<ffi.Int8>)>>('tr');
  late final _tr = _trPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>)>();

  void SignFFI_drop(
    SignFFI obj,
  ) {
    return _SignFFI_drop(
      obj,
    );
  }

  late final _SignFFI_dropPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(SignFFI)>>('SignFFI_drop');
  late final _SignFFI_drop =
      _SignFFI_dropPtr.asFunction<void Function(SignFFI)>();
}

class Vec_u8 extends ffi.Opaque {}

class SignFFI extends ffi.Struct {
  @ffi.Int32()
  external int success;

  external ffi.Pointer<ffi.Int8> error;

  external ffi.Pointer<ffi.Int8> token;

  external ffi.Pointer<ffi.Int8> refresh_token;
}
